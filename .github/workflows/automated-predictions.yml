name: Automated Matchday Predictions

on:
  # Schedule to run twice daily at midnight and noon Europe/Berlin time
  # Note: GitHub Actions cron runs in UTC only, so these times approximate Europe/Berlin
  schedule:
    - cron: '0 23 * * *'  # ~Midnight Europe/Berlin (23:00 UTC = 00:00 CET, 01:00 CEST)
    - cron: '0 11 * * *'  # ~Noon Europe/Berlin (11:00 UTC = 12:00 CET, 13:00 CEST)
  
  # Allow manual triggering with model selection
  workflow_dispatch:
    inputs:
      model:
        description: 'OpenAI model to use for predictions'
        required: true
        default: 'o4-mini'
        type: choice
        options:
          - 'o4-mini'
          - 'o1'
      force_prediction:
        description: 'Force prediction even if verify passes'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Environment to run (overrides schedule detection)'
        required: false
        default: 'auto'
        type: choice
        options:
          - 'auto'
          - 'staging'
          - 'production'

env:
  # Configuration for different environments
  # These can be overridden by repository variables in GitHub settings
  STAGING_ENABLED: ${{ vars.STAGING_ENABLED || 'true' }}
  STAGING_MODEL: ${{ vars.STAGING_MODEL || 'o4-mini' }}
  PRODUCTION_ENABLED: ${{ vars.PRODUCTION_ENABLED || 'false' }}
  PRODUCTION_MODEL: ${{ vars.PRODUCTION_MODEL || 'o1' }}
  # Set timezone for consistent logging
  TZ: 'Europe/Berlin'

jobs:
  automated-predictions:
    name: Automated Matchday Predictions
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'
          
      - name: Restore dependencies
        run: dotnet restore
        
      - name: Build project
        run: dotnet build --no-restore --configuration Release
        
      - name: Determine environment and configuration
        id: config
        run: |
          # Check for configuration conflicts first
          if [ "${{ env.STAGING_ENABLED }}" = "true" ] && [ "${{ env.PRODUCTION_ENABLED }}" = "true" ]; then
            echo "❌ Configuration Error: Both STAGING_ENABLED and PRODUCTION_ENABLED are set to true"
            echo "This is likely a configuration mistake. Please set only one environment to true."
            echo "Current settings:"
            echo "  STAGING_ENABLED=${{ env.STAGING_ENABLED }}"
            echo "  PRODUCTION_ENABLED=${{ env.PRODUCTION_ENABLED }}"
            echo ""
            echo "To fix this, go to Repository Settings → Actions → Variables and ensure only one environment is enabled."
            exit 1
          fi
          
          # Determine which environment to use
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.environment }}" != "auto" ]; then
            # Manual trigger with explicit environment
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            MODEL="${{ github.event.inputs.model }}"
            FORCE_PREDICTION="${{ github.event.inputs.force_prediction }}"
            echo "🎯 Manual trigger - using explicit environment: $ENVIRONMENT with model: $MODEL"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger with auto-detection
            if [ "${{ env.STAGING_ENABLED }}" = "true" ]; then
              ENVIRONMENT="staging"
              MODEL="${{ env.STAGING_MODEL }}"
            elif [ "${{ env.PRODUCTION_ENABLED }}" = "true" ]; then
              ENVIRONMENT="production"
              MODEL="${{ env.PRODUCTION_MODEL }}"
            else
              echo "❌ No environment enabled for auto-detection"
              exit 1
            fi
            FORCE_PREDICTION="${{ github.event.inputs.force_prediction }}"
            echo "🤖 Manual trigger - auto-detected environment: $ENVIRONMENT with model: $MODEL"
          else
            # Scheduled trigger
            if [ "${{ env.STAGING_ENABLED }}" = "true" ]; then
              ENVIRONMENT="staging"
              MODEL="${{ env.STAGING_MODEL }}"
              FORCE_PREDICTION="false"
              echo "⏰ Scheduled trigger - using staging environment with model: $MODEL"
            elif [ "${{ env.PRODUCTION_ENABLED }}" = "true" ]; then
              ENVIRONMENT="production"
              MODEL="${{ env.PRODUCTION_MODEL }}"
              FORCE_PREDICTION="false"
              echo "⏰ Scheduled trigger - using production environment with model: $MODEL"
            else
              echo "⏸️ Scheduled trigger - no environment enabled, skipping workflow"
              echo "enabled=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "model=$MODEL" >> $GITHUB_OUTPUT
          echo "force_prediction=$FORCE_PREDICTION" >> $GITHUB_OUTPUT
          echo "enabled=true" >> $GITHUB_OUTPUT
          
      - name: Verify current predictions
        if: steps.config.outputs.enabled == 'true'
        id: verify
        continue-on-error: true
        run: |
          echo "🔍 Verifying current matchday predictions..."
          echo "Environment: ${{ steps.config.outputs.environment }}"
          echo "Model: ${{ steps.config.outputs.model }}"
          dotnet run --project src/Orchestrator/Orchestrator.csproj --configuration Release -- verify --init-matchday --agent
        env:
          KICKTIPP_USERNAME: ${{ secrets.KICKTIPP_USERNAME }}
          KICKTIPP_PASSWORD: ${{ secrets.KICKTIPP_PASSWORD }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_SERVICE_ACCOUNT_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          
      - name: Generate and post predictions
        if: steps.config.outputs.enabled == 'true' && (steps.verify.outcome == 'failure' || steps.config.outputs.force_prediction == 'true')
        run: |
          echo "🤖 Generating predictions with model: ${{ steps.config.outputs.model }}"
          echo "Environment: ${{ steps.config.outputs.environment }}"
          if [ "${{ steps.verify.outcome }}" = "failure" ]; then
            echo "📝 Predictions needed - verify command indicated missing or mismatched predictions"
          else
            echo "🔄 Force prediction enabled - running regardless of verify result"
          fi
          
          dotnet run --project src/Orchestrator/Orchestrator.csproj --configuration Release -- matchday "${{ steps.config.outputs.model }}" --override-kicktipp --verbose --agent
        env:
          KICKTIPP_USERNAME: ${{ secrets.KICKTIPP_USERNAME }}
          KICKTIPP_PASSWORD: ${{ secrets.KICKTIPP_PASSWORD }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_SERVICE_ACCOUNT_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          
      - name: Final verification
        if: steps.config.outputs.enabled == 'true' && (steps.verify.outcome == 'failure' || steps.config.outputs.force_prediction == 'true')
        run: |
          echo "✅ Running final verification to confirm predictions were posted successfully..."
          dotnet run --project src/Orchestrator/Orchestrator.csproj --configuration Release -- verify --agent
        env:
          KICKTIPP_USERNAME: ${{ secrets.KICKTIPP_USERNAME }}
          KICKTIPP_PASSWORD: ${{ secrets.KICKTIPP_PASSWORD }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_SERVICE_ACCOUNT_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          
      - name: Success notification
        if: steps.config.outputs.enabled == 'true' && steps.verify.outcome == 'success' && steps.config.outputs.force_prediction == 'false'
        run: |
          echo "✅ All predictions are up to date - no action needed"
          
      - name: Workflow summary
        if: always()
        run: |
          echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.config.outputs.enabled }}" = "true" ]; then
            echo "- **Environment**: ${{ steps.config.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Model**: ${{ steps.config.outputs.model }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Verify Result**: ${{ steps.verify.outcome }}" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ steps.verify.outcome }}" = "failure" ] || [ "${{ steps.config.outputs.force_prediction }}" = "true" ]; then
              echo "- **Action**: Predictions generated and posted" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Action**: No predictions needed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Status**: Workflow skipped - no environment enabled" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Timezone**: ${{ env.TZ }}" >> $GITHUB_STEP_SUMMARY
